/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package algorithm.p2910;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {


    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int n = Integer.parseInt(st.nextToken());
        Map<Integer, Item> map = new HashMap<>();

        st = new StringTokenizer(br.readLine(), " ");
        for (int i = 0; i < n; i++) {
            int temp = Integer.parseInt(st.nextToken());
            if (map.get(temp) == null) {
                map.put(temp, new Item(i));
            }
            map.get(temp).addCount();
        }
        map.entrySet().stream().sorted((o1, o2) -> {
            if (o1.getValue().getCount() == o2.getValue().getCount()) {
                return Integer.compare(o1.getValue().getIndex(), o2.getValue().getIndex());
            }
            return Integer.compare(o2.getValue().getCount(), o1.getValue().getCount());
        }).forEach(entry -> {
            for (int i = 1; i < entry.getValue().getCount(); i++) {
                System.out.print(entry.getKey() + " ");
            }
        });
    }
}

class Item {

    private final int index;
    private int count;

    public Item(int index) {
        this.index = index;
        count = 1;
    }

    public void addCount() {
        count++;
    }

    public int getCount() {
        return count;
    }

    public int getIndex() {
        return index;
    }
}